#include <iostream>
#include <vector>
#include <string>
#include <fstream>

using namespace std;

struct Order {
    string customerName;
    string productName;
    string status;
    string trackingNumber;
};

struct OrderTracker {
    vector<Order> orders;

    void addOrder(const Order& order) {
        orders.push_back(order);
    }

    void updateStatus(int index, const string& newStatus) {
        if (index >= 0 && index < orders.size()) {
            orders[index].status = newStatus;
        } else {
            cout << "Invalid order index." << endl;
        }
    }

    void updateTrackingNumber(int index, const string& newTrackingNumber) {
        if (index >= 0 && index < orders.size()) {
            orders[index].trackingNumber = newTrackingNumber;
        } else {
            cout << "Invalid order index." << endl;
        }
    }

    void deleteOrder(int index) {
        if (index >= 0 && index < orders.size()) {
            orders.erase(orders.begin() + index);
        } else {
            cout << "Invalid order index." << endl;
        }
    }

    void displayOrders() {
        for (int i = 0; i < orders.size(); ++i) {
            cout << i << ". " << orders[i].customerName << " | "
                             << orders[i].productName << " | "
                             << orders[i].status << " | "
                             << orders[i].trackingNumber << endl;
        }
    }

    void saveToFile(const string& filename) {
        ofstream file(filename);
        if (file) {
            for (const auto& order : orders) {
                file << order.customerName << "," << order.productName << ","
                     << order.status << "," << order.trackingNumber << endl;
            }
            cout << "Orders saved to " << filename << "." << endl;
        } else {
            cout << "Failed to save orders to file." << endl;
        }
        file.close();
    }

    void loadFromFile(const string& filename) {
        ifstream file(filename);
        if (file) {
            Order order;
            while (getline(file, order.customerName, ',') &&
                   getline(file, order.productName, ',') &&
                   getline(file, order.status, ',') &&
                   getline(file, order.trackingNumber)) {
                orders.push_back(order);
            }
            cout << "Orders loaded from " << filename << "." << endl;
        } else {
            cout << "Failed to load orders from file." << endl;
        }
        file.close();
    }
};

int main() {
    OrderTracker tracker;
    string filename = "orders.txt";
    tracker.loadFromFile(filename);

    int choice;
    do {
        cout << "\nMenu:\n"
                "1. Add Order\n"
                "2. Update Status\n"
                "3. Update Tracking Number\n"
                "4. Delete Order\n"
                "5. Display Orders\n"
                "6. Save and Exit\n"
                "Enter your choice: ";
        cin >> choice;

        switch (choice) {
          case 1: {
                Order newOrder;
                cout << "Enter order details:\n";
                cout << "Customer Name: ";
                cin.ignore();  // Ignore the newline character in the input buffer
                getline(cin, newOrder.customerName);
                cout << "Product Name: ";
                getline(cin, newOrder.productName);
                cout << "Status: ";
                getline(cin, newOrder.status);
                cout << "Tracking Number: ";
                getline(cin, newOrder.trackingNumber);
                tracker.addOrder(newOrder);
                break;
            }



            case 2: {
                int index;
                string newStatus;
                cout << "Enter order index and new status: ";
                cin >> index >> newStatus;
                tracker.updateStatus(index, newStatus);
                break;
            }
            case 3: {
                int index;
                string newTrackingNumber;
                cout << "Enter order index and new tracking number: ";
                cin >> index >> newTrackingNumber;
                tracker.updateTrackingNumber(index, newTrackingNumber);
                break;
            }
            case 4: {
                int index;
                cout << "Enter order index to delete: ";
                cin >> index;
                tracker.deleteOrder(index);
                break;
            }
            case 5:
                tracker.displayOrders();
                break;
            case 6:
                tracker.saveToFile(filename);
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    } while (choice != 6);

    return 0;
}
