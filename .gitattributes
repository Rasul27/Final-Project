#include <iostream>
#include <vector>
#include <string>
#include <fstream>

using namespace std;

// Определение структуры для заказа
struct Order {
    string customerName;
    string productName;
    string status;
    string trackingNumber;
};

// Определение структуры для заказа трекера
struct OrderTracker {
    vector<Order> orders; // Vector to store orders

    // Функция добавления нового заказа
    void addOrder(const Order& order) {
        orders.push_back(order);
    }

    // Функция обновления заказа
    void updateStatus(int index, const string& newStatus) {
        if (index >= 0 && index < orders.size()) {
            orders[index].status = newStatus;
        } else {
            cout << "Invalid order index." << endl;
        }
    }

    // Функция обновления номера заказа
    void updateTrackingNumber(int index, const string& newTrackingNumber) {
        if (index >= 0 && index < orders.size()) {
            orders[index].trackingNumber = newTrackingNumber;
        } else {
            cout << "Invalid order index." << endl;
        }
    }

    // Функция удаления заказа
    void deleteOrder(int index) {
        if (index >= 0 && index < orders.size()) {
            orders.erase(orders.begin() + index);
        } else {
            cout << "Invalid order index." << endl;
        }
    }

    // Вывод заказов на дисплей
    void displayOrders() {
        cout << "Index\tCustomer Name\tProduct Name\tStatus\t\tTracking Number" << endl;
        for (int i = 0; i < orders.size(); ++i) {
            cout << i << "\t" << orders[i].customerName << "\t\t" << orders[i].productName << "\t\t" << orders[i].status << "\t\t" << orders[i].trackingNumber << endl;
        }
    }

    // Сохранение заказов в файле
    void saveToFile(const string& filename) {
        ofstream file(filename);
        if (file.is_open()) {
            for (const auto& order : orders) {
                file << order.customerName << "," << order.productName << "," << order.status << "," << order.trackingNumber << endl;
            }
            file.close();
        } else {
            cout << "Unable to open file for writing." << endl;
        }
    }

    // Функция загрузки заказов из файлов 
    void loadFromFile(const string& filename) {
        ifstream file(filename);
        if (file.is_open()) {
            orders.clear();
            string line;
            while (getline(file, line)) {
                Order order;
                size_t pos = 0;
                pos = line.find(',');
                order.customerName = line.substr(0, pos);
                line.erase(0, pos + 1);

                pos = line.find(',');
                order.productName = line.substr(0, pos);
                line.erase(0, pos + 1);

                pos = line.find(',');
                order.status = line.substr(0, pos);
                line.erase(0, pos + 1);

                order.trackingNumber = line;

                orders.push_back(order);
            }
            file.close();
        } else {
            cout << "Unable to open file for reading." << endl;
        }
    }
};


int main() {
    OrderTracker tracker;
    string filename = "orders.txt";
    tracker.loadFromFile(filename);

    int choice;
    do {
        cout << "\nMenu:\n";
        cout << "1. Add Order\n";
        cout << "2. Update Status\n";
        cout << "3. Update Tracking Number\n";
        cout << "4. Delete Order\n";
        cout << "5. Display Orders\n";
        cout << "6. Save and Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                Order newOrder;
                cout << "Enter customer name: ";
                cin >> newOrder.customerName;
                cout << "Enter product name: ";
                cin >> newOrder.productName;
                cout << "Enter status: ";
                cin >> newOrder.status;
                cout << "Enter tracking number: ";
                cin >> newOrder.trackingNumber;
                tracker.addOrder(newOrder);
                break;
            }
            case 2: {
                int index;
                string newStatus;
                cout << "Enter order index: ";
                cin >> index;
                cout << "Enter new status: ";
                cin >> newStatus;
                tracker.updateStatus(index, newStatus);
                break;
            }
            case 3: {
                int index;
                string newTrackingNumber;
                cout << "Enter order index: ";
                cin >> index;
                cout << "Enter new tracking number: ";
                cin >> newTrackingNumber;
                tracker.updateTrackingNumber(index, newTrackingNumber);
                break;
            }
            case 4: {
                int index;
                cout << "Enter order index: ";
                cin >> index;
                tracker.deleteOrder(index);
                break;
            }
            case 5:
                tracker.displayOrders();
                break;
            case 6:
                tracker.saveToFile(filename);
                cout << "Orders saved to " << filename << ". Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    } while (choice != 6);

    return 0;
}
